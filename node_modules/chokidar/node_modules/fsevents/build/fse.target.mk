# This file is generated by gyp; do not edit.

TOOLSET := target
TARGET := fse
DEFS_Debug := \
	'-D_DARWIN_USE_64_BIT_INODE=1' \
	'-D_LARGEFILE_SOURCE' \
	'-D_FILE_OFFSET_BITS=64' \
	'-DBUILDING_NODE_EXTENSION' \
	'-DDEBUG' \
	'-D_DEBUG'

# Flags passed to all source files.
CFLAGS_Debug := \
	-O0 \
	-gdwarf-2 \
	-mmacosx-version-min=10.5 \
	-arch x86_64 \
	-Wall \
	-Wendif-labels \
	-W \
	-Wno-unused-parameter

# Flags passed to only C files.
CFLAGS_C_Debug := \
	-fno-strict-aliasing

# Flags passed to only C++ files.
CFLAGS_CC_Debug := \
	-fno-rtti \
	-fno-exceptions \
	-fno-threadsafe-statics \
	-fno-strict-aliasing

# Flags passed to only ObjC files.
CFLAGS_OBJC_Debug :=

# Flags passed to only ObjC++ files.
CFLAGS_OBJCC_Debug :=

INCS_Debug := \
	-I/Users/florianbreisch/.atom/.node-gyp/.node-gyp/0.11.10/src \
	-I/Users/florianbreisch/.atom/.node-gyp/.node-gyp/0.11.10/deps/uv/include \
	-I/Users/florianbreisch/.atom/.node-gyp/.node-gyp/0.11.10/deps/v8/include \
	-I$(srcdir)/node_modules/nan

DEFS_Release := \
	'-D_DARWIN_USE_64_BIT_INODE=1' \
	'-D_LARGEFILE_SOURCE' \
	'-D_FILE_OFFSET_BITS=64' \
	'-DBUILDING_NODE_EXTENSION'

# Flags passed to all source files.
CFLAGS_Release := \
	-Os \
	-gdwarf-2 \
	-mmacosx-version-min=10.5 \
	-arch x86_64 \
	-Wall \
	-Wendif-labels \
	-W \
	-Wno-unused-parameter

# Flags passed to only C files.
CFLAGS_C_Release := \
	-fno-strict-aliasing

# Flags passed to only C++ files.
CFLAGS_CC_Release := \
	-fno-rtti \
	-fno-exceptions \
	-fno-threadsafe-statics \
	-fno-strict-aliasing

# Flags passed to only ObjC files.
CFLAGS_OBJC_Release :=

# Flags passed to only ObjC++ files.
CFLAGS_OBJCC_Release :=

INCS_Release := \
	-I/Users/florianbreisch/.atom/.node-gyp/.node-gyp/0.11.10/src \
	-I/Users/florianbreisch/.atom/.node-gyp/.node-gyp/0.11.10/deps/uv/include \
	-I/Users/florianbreisch/.atom/.node-gyp/.node-gyp/0.11.10/deps/v8/include \
	-I$(srcdir)/node_modules/nan

OBJS := \
	$(obj).target/$(TARGET)/fsevents.o

# Add to the list of files we specially track dependencies for.
all_deps += $(OBJS)

# CFLAGS et al overrides must be target-local.
# See "Target-specific Variable Values" in the GNU Make manual.
$(OBJS): TOOLSET := $(TOOLSET)
$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))
$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))
$(OBJS): GYP_OBJCFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE)) $(CFLAGS_OBJC_$(BUILDTYPE))
$(OBJS): GYP_OBJCXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE)) $(CFLAGS_OBJCC_$(BUILDTYPE))

# Suffix rules, putting all outputs into $(obj).

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.cc FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

# Try building from generated source, too.

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.cc FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.cc FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

# End of this set of suffix rules
### Rules for final target.
LDFLAGS_Debug := \
	-framework CoreFoundation -framework CoreServices \
	-Wl,-search_paths_first \
	-mmacosx-version-min=10.5 \
	-arch x86_64 \
	-L$(builddir)

LIBTOOLFLAGS_Debug := \
	-framework CoreFoundation -framework CoreServices \
	-Wl,-search_paths_first

LDFLAGS_Release := \
	-framework CoreFoundation -framework CoreServices \
	-Wl,-search_paths_first \
	-mmacosx-version-min=10.5 \
	-arch x86_64 \
	-L$(builddir)

LIBTOOLFLAGS_Release := \
	-framework CoreFoundation -framework CoreServices \
	-Wl,-search_paths_first

LIBS := \
	-undefined dynamic_lookup

$(builddir)/fse.node: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))
$(builddir)/fse.node: LIBS := $(LIBS)
$(builddir)/fse.node: GYP_LIBTOOLFLAGS := $(LIBTOOLFLAGS_$(BUILDTYPE))
$(builddir)/fse.node: export BUILT_PRODUCTS_DIR := ${abs_builddir}
$(builddir)/fse.node: export CHROMIUM_STRIP_SAVE_FILE := 
$(builddir)/fse.node: export CONFIGURATION := ${BUILDTYPE}
$(builddir)/fse.node: export DYLIB_INSTALL_NAME_BASE := @rpath
$(builddir)/fse.node: export EXECUTABLE_NAME := fse.node
$(builddir)/fse.node: export EXECUTABLE_PATH := fse.node
$(builddir)/fse.node: export FULL_PRODUCT_NAME := fse.node
$(builddir)/fse.node: export LD_DYLIB_INSTALL_NAME := @rpath/fse.node
$(builddir)/fse.node: export MACH_O_TYPE := mh_bundle
$(builddir)/fse.node: export PRODUCT_NAME := fse
$(builddir)/fse.node: export PRODUCT_TYPE := com.apple.product-type.library.dynamic
$(builddir)/fse.node: export SDKROOT := 
$(builddir)/fse.node: export SRCROOT := ${abs_srcdir}/
$(builddir)/fse.node: export SOURCE_ROOT := ${SRCROOT}
$(builddir)/fse.node: export TARGET_BUILD_DIR := ${abs_builddir}
$(builddir)/fse.node: export TEMP_DIR := ${TMPDIR}
$(builddir)/fse.node: TARGET_POSTBUILDS_Debug := "echo DSYMUTIL\\(fse\\)" "dsymutil $(builddir)/fse.node -o $(builddir)/fse.node.dSYM"
$(builddir)/fse.node: TARGET_POSTBUILDS_Release := "echo DSYMUTIL\\(fse\\)" "dsymutil $(builddir)/fse.node -o $(builddir)/fse.node.dSYM"
$(builddir)/fse.node: builddir := $(abs_builddir)
$(builddir)/fse.node: POSTBUILDS := 'cd ""' $(TARGET_POSTBUILDS_$(BUILDTYPE))
$(builddir)/fse.node: TOOLSET := $(TOOLSET)
$(builddir)/fse.node: $(OBJS) FORCE_DO_CMD
	$(call do_cmd,solink_module,,1)

all_deps += $(builddir)/fse.node
# Add target alias
.PHONY: fse
fse: $(builddir)/fse.node

# Short alias for building this executable.
.PHONY: fse.node
fse.node: $(builddir)/fse.node

# Add executable to "all" target.
.PHONY: all
all: $(builddir)/fse.node

